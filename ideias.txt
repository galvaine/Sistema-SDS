Criar o login - ok
Criar a pagina de usuario - ok
Criar a aba de dados e alteralos

Criar o login de admin
cria uma forma de gerenciamento de contas
Criar uma forma de abilitar e desabilitar a alteração de dados

Criar o relatorio - ok
Criar uma forma de envio e armazenamento do relatorio

sistema de permuta
seleção se subistituto
evitar que se faça uma permuta com solicitante e subistituto com o mesmo nome 
organização e apresentação da tabela de permuta



vercel.json
{
  "version": 2,
  "builds": [
    {
      "src": "api/main.py",
      "use": "@vercel/python"
    }
  ],
  "routes": [
    {
      "src": "/(.*)",
      "dest": "api/main.py"
    }
  ]
}

main.py
from app import app, db

if __name__ == '__main__':
    with app.app_context():
        db.create_all()
    app.run(debug=True)


__init__.py
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager
from flask_bcrypt import Bcrypt
import psycopg2



# Criação do aplicativo Flask
app = Flask(__name__)

# Criando e configurando o banco de dados



import tempfile

app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://postgres:WyOXFVaYNLCf0pXt@db.fsnjmvfbkemdsrxolpgd.supabase.co:5432/postgres'
app.config['SECRET_KEY'] = '12456389'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)



# Configurando o flask login
lm = LoginManager()
lm.init_app(app)
lm.login_view ='login'
bcrypt = Bcrypt(app)


# Importação das rotas sempres posterior a criação do aplicativo 
from app.routes import index
from app.routes import dashboard
from app.routes import cadastro
from app.routes import relatorio
from app.routes import permuta
from app.routes import logoff

# importando o banco de Dados
from app.models import Cadastro

